version: '3.8'
services:
  adminer:
    container_name: adminer
    hostname: adminer
    image: adminer
    build:
      context: ./requirements/adminer
      dockerfile: Dockerfile
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DEFAULT_USERNAME: ${POSTGRES_USER}
      ADMINER_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - camagru
    ports:
      - "8080:8080"
    restart: on-failure
    volumes:
      - adminer_data:/var/www/html

  frontend:
    container_name: frontend
    hostname: frontend
    image: frontend
    build:
      context: ./requirements/frontend
      dockerfile: Dockerfile
    networks:
      - camagru
    restart: on-failure

  nginx:
    container_name: nginx
    hostname: nginx
    image: nginx
    build:
      context: ./requirements/nginx
      dockerfile: Dockerfile
    depends_on:
      - frontend
    networks:
      - camagru
    ports:
      - "1505:1505"
    restart: on-failure

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres
    build:
      context: ./requirements/postgres
      dockerfile: Dockerfile
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - camagru
    ports:
      - "5432:5432"
    restart: on-failure
    volumes:
      - postgres_data:/var/lib/postgresql/data

networks:
  camagru:
    driver: bridge

volumes:
  adminer_data:
    driver: local
  postgres_data:
    driver: local